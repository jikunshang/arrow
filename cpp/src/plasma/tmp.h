// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_PLASMA_PLASMA_FLATBUF_H_
#define FLATBUFFERS_GENERATED_PLASMA_PLASMA_FLATBUF_H_

#include "flatbuffers/flatbuffers.h"

#include "common_generated.h"

namespace plasma {
namespace flatbuf {

struct PlasmaObjectSpec;

struct PlasmaMetrics;

struct PlasmaSetOptionsRequest;

struct PlasmaSetOptionsReply;

struct PlasmaGetDebugStringRequest;

struct PlasmaGetDebugStringReply;

struct PlasmaCreateRequest;

struct CudaHandle;

struct PlasmaCreateReply;

struct PlasmaCreateAndSealRequest;

struct PlasmaCreateAndSealReply;

struct PlasmaCreateAndSealBatchRequest;

struct PlasmaCreateAndSealBatchReply;

struct PlasmaAbortRequest;

struct PlasmaAbortReply;

struct PlasmaSealRequest;

struct PlasmaSealReply;

struct PlasmaMetricsRequest;

struct PlasmaMetricsReply;

struct PlasmaGetRequest;

struct PlasmaGetReply;

struct PlasmaReleaseRequest;

struct PlasmaReleaseReply;

struct PlasmaDeleteRequest;

struct PlasmaDeleteReply;

struct PlasmaContainsRequest;

struct PlasmaContainsReply;

struct PlasmaListRequest;

struct PlasmaListReply;

struct PlasmaConnectRequest;

struct PlasmaConnectReply;

struct PlasmaEvictRequest;

struct PlasmaEvictReply;

struct PlasmaSubscribeRequest;

struct PlasmaNotification;

struct PlasmaDataRequest;

struct PlasmaDataReply;

struct PlasmaRefreshLRURequest;

struct PlasmaRefreshLRUReply;

enum MessageType : int64_t {
  MessageType_PlasmaDisconnectClient = 0,
  MessageType_PlasmaCreateRequest = 1LL,
  MessageType_PlasmaCreateReply = 2LL,
  MessageType_PlasmaCreateAndSealRequest = 3LL,
  MessageType_PlasmaCreateAndSealReply = 4LL,
  MessageType_PlasmaAbortRequest = 5LL,
  MessageType_PlasmaAbortReply = 6LL,
  MessageType_PlasmaSealRequest = 7LL,
  MessageType_PlasmaSealReply = 8LL,
  MessageType_PlasmaGetRequest = 9LL,
  MessageType_PlasmaGetReply = 10LL,
  MessageType_PlasmaReleaseRequest = 11LL,
  MessageType_PlasmaReleaseReply = 12LL,
  MessageType_PlasmaDeleteRequest = 13LL,
  MessageType_PlasmaDeleteReply = 14LL,
  MessageType_PlasmaContainsRequest = 15LL,
  MessageType_PlasmaContainsReply = 16LL,
  MessageType_PlasmaListRequest = 17LL,
  MessageType_PlasmaListReply = 18LL,
  MessageType_PlasmaConnectRequest = 19LL,
  MessageType_PlasmaConnectReply = 20LL,
  MessageType_PlasmaEvictRequest = 21LL,
  MessageType_PlasmaEvictReply = 22LL,
  MessageType_PlasmaSubscribeRequest = 23LL,
  MessageType_PlasmaUnsubscribeRequest = 24LL,
  MessageType_PlasmaDataRequest = 25LL,
  MessageType_PlasmaDataReply = 26LL,
  MessageType_PlasmaNotification = 27LL,
  MessageType_PlasmaSetOptionsRequest = 28LL,
  MessageType_PlasmaSetOptionsReply = 29LL,
  MessageType_PlasmaGetDebugStringRequest = 30LL,
  MessageType_PlasmaGetDebugStringReply = 31LL,
  MessageType_PlasmaCreateAndSealBatchRequest = 32LL,
  MessageType_PlasmaCreateAndSealBatchReply = 33LL,
  MessageType_PlasmaRefreshLRURequest = 34LL,
  MessageType_PlasmaRefreshLRUReply = 35LL,
  MessageType_PlasmaMetricsRequest = 36LL,
  MessageType_PlasmaMetricsReply = 37LL,
  MessageType_MIN = MessageType_PlasmaDisconnectClient,
  MessageType_MAX = MessageType_PlasmaMetricsReply
};

inline const MessageType (&EnumValuesMessageType())[38] {
  static const MessageType values[] = {
    MessageType_PlasmaDisconnectClient,
    MessageType_PlasmaCreateRequest,
    MessageType_PlasmaCreateReply,
    MessageType_PlasmaCreateAndSealRequest,
    MessageType_PlasmaCreateAndSealReply,
    MessageType_PlasmaAbortRequest,
    MessageType_PlasmaAbortReply,
    MessageType_PlasmaSealRequest,
    MessageType_PlasmaSealReply,
    MessageType_PlasmaGetRequest,
    MessageType_PlasmaGetReply,
    MessageType_PlasmaReleaseRequest,
    MessageType_PlasmaReleaseReply,
    MessageType_PlasmaDeleteRequest,
    MessageType_PlasmaDeleteReply,
    MessageType_PlasmaContainsRequest,
    MessageType_PlasmaContainsReply,
    MessageType_PlasmaListRequest,
    MessageType_PlasmaListReply,
    MessageType_PlasmaConnectRequest,
    MessageType_PlasmaConnectReply,
    MessageType_PlasmaEvictRequest,
    MessageType_PlasmaEvictReply,
    MessageType_PlasmaSubscribeRequest,
    MessageType_PlasmaUnsubscribeRequest,
    MessageType_PlasmaDataRequest,
    MessageType_PlasmaDataReply,
    MessageType_PlasmaNotification,
    MessageType_PlasmaSetOptionsRequest,
    MessageType_PlasmaSetOptionsReply,
    MessageType_PlasmaGetDebugStringRequest,
    MessageType_PlasmaGetDebugStringReply,
    MessageType_PlasmaCreateAndSealBatchRequest,
    MessageType_PlasmaCreateAndSealBatchReply,
    MessageType_PlasmaRefreshLRURequest,
    MessageType_PlasmaRefreshLRUReply,
    MessageType_PlasmaMetricsRequest,
    MessageType_PlasmaMetricsReply
  };
  return values;
}

inline const char * const *EnumNamesMessageType() {
  static const char * const names[39] = {
    "PlasmaDisconnectClient",
    "PlasmaCreateRequest",
    "PlasmaCreateReply",
    "PlasmaCreateAndSealRequest",
    "PlasmaCreateAndSealReply",
    "PlasmaAbortRequest",
    "PlasmaAbortReply",
    "PlasmaSealRequest",
    "PlasmaSealReply",
    "PlasmaGetRequest",
    "PlasmaGetReply",
    "PlasmaReleaseRequest",
    "PlasmaReleaseReply",
    "PlasmaDeleteRequest",
    "PlasmaDeleteReply",
    "PlasmaContainsRequest",
    "PlasmaContainsReply",
    "PlasmaListRequest",
    "PlasmaListReply",
    "PlasmaConnectRequest",
    "PlasmaConnectReply",
    "PlasmaEvictRequest",
    "PlasmaEvictReply",
    "PlasmaSubscribeRequest",
    "PlasmaUnsubscribeRequest",
    "PlasmaDataRequest",
    "PlasmaDataReply",
    "PlasmaNotification",
    "PlasmaSetOptionsRequest",
    "PlasmaSetOptionsReply",
    "PlasmaGetDebugStringRequest",
    "PlasmaGetDebugStringReply",
    "PlasmaCreateAndSealBatchRequest",
    "PlasmaCreateAndSealBatchReply",
    "PlasmaRefreshLRURequest",
    "PlasmaRefreshLRUReply",
    "PlasmaMetricsRequest",
    "PlasmaMetricsReply",
    nullptr
  };
  return names;
}

inline const char *EnumNameMessageType(MessageType e) {
  if (e < MessageType_PlasmaDisconnectClient || e > MessageType_PlasmaMetricsReply) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesMessageType()[index];
}

enum PlasmaError {
  PlasmaError_OK = 0,
  PlasmaError_ObjectExists = 1,
  PlasmaError_ObjectNonexistent = 2,
  PlasmaError_OutOfMemory = 3,
  PlasmaError_ObjectNotSealed = 4,
  PlasmaError_ObjectInUse = 5,
  PlasmaError_MIN = PlasmaError_OK,
  PlasmaError_MAX = PlasmaError_ObjectInUse
};

inline const PlasmaError (&EnumValuesPlasmaError())[6] {
  static const PlasmaError values[] = {
    PlasmaError_OK,
    PlasmaError_ObjectExists,
    PlasmaError_ObjectNonexistent,
    PlasmaError_OutOfMemory,
    PlasmaError_ObjectNotSealed,
    PlasmaError_ObjectInUse
  };
  return values;
}

inline const char * const *EnumNamesPlasmaError() {
  static const char * const names[7] = {
    "OK",
    "ObjectExists",
    "ObjectNonexistent",
    "OutOfMemory",
    "ObjectNotSealed",
    "ObjectInUse",
    nullptr
  };
  return names;
}

inline const char *EnumNamePlasmaError(PlasmaError e) {
  if (e < PlasmaError_OK || e > PlasmaError_ObjectInUse) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesPlasmaError()[index];
}

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(8) PlasmaObjectSpec FLATBUFFERS_FINAL_CLASS {
 private:
  int32_t segment_index_;
  int32_t padding0__;
  uint64_t data_offset_;
  uint64_t data_size_;
  uint64_t metadata_offset_;
  uint64_t metadata_size_;
  int32_t device_num_;
  int32_t padding1__;

 public:
  PlasmaObjectSpec() {
    memset(static_cast<void *>(this), 0, sizeof(PlasmaObjectSpec));
  }
  PlasmaObjectSpec(int32_t _segment_index, uint64_t _data_offset, uint64_t _data_size, uint64_t _metadata_offset, uint64_t _metadata_size, int32_t _device_num)
      : segment_index_(flatbuffers::EndianScalar(_segment_index)),
        padding0__(0),
        data_offset_(flatbuffers::EndianScalar(_data_offset)),
        data_size_(flatbuffers::EndianScalar(_data_size)),
        metadata_offset_(flatbuffers::EndianScalar(_metadata_offset)),
        metadata_size_(flatbuffers::EndianScalar(_metadata_size)),
        device_num_(flatbuffers::EndianScalar(_device_num)),
        padding1__(0) {
    (void)padding0__;
    (void)padding1__;
  }
  int32_t segment_index() const {
    return flatbuffers::EndianScalar(segment_index_);
  }
  uint64_t data_offset() const {
    return flatbuffers::EndianScalar(data_offset_);
  }
  uint64_t data_size() const {
    return flatbuffers::EndianScalar(data_size_);
  }
  uint64_t metadata_offset() const {
    return flatbuffers::EndianScalar(metadata_offset_);
  }
  uint64_t metadata_size() const {
    return flatbuffers::EndianScalar(metadata_size_);
  }
  int32_t device_num() const {
    return flatbuffers::EndianScalar(device_num_);
  }
};
FLATBUFFERS_STRUCT_END(PlasmaObjectSpec, 48);

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(8) PlasmaMetrics FLATBUFFERS_FINAL_CLASS {
 private:
  uint64_t share_mem_total_;
  uint64_t share_mem_used_;
  uint64_t external_total_;
  uint64_t external_used_;

 public:
  PlasmaMetrics() {
    memset(static_cast<void *>(this), 0, sizeof(PlasmaMetrics));
  }
  PlasmaMetrics(uint64_t _share_mem_total, uint64_t _share_mem_used, uint64_t _external_total, uint64_t _external_used)
      : share_mem_total_(flatbuffers::EndianScalar(_share_mem_total)),
        share_mem_used_(flatbuffers::EndianScalar(_share_mem_used)),
        external_total_(flatbuffers::EndianScalar(_external_total)),
        external_used_(flatbuffers::EndianScalar(_external_used)) {
  }
  uint64_t share_mem_total() const {
    return flatbuffers::EndianScalar(share_mem_total_);
  }
  uint64_t share_mem_used() const {
    return flatbuffers::EndianScalar(share_mem_used_);
  }
  uint64_t external_total() const {
    return flatbuffers::EndianScalar(external_total_);
  }
  uint64_t external_used() const {
    return flatbuffers::EndianScalar(external_used_);
  }
};
FLATBUFFERS_STRUCT_END(PlasmaMetrics, 32);

struct PlasmaSetOptionsRequest FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_CLIENT_NAME = 4,
    VT_OUTPUT_MEMORY_QUOTA = 6
  };
  const flatbuffers::String *client_name() const {
    return GetPointer<const flatbuffers::String *>(VT_CLIENT_NAME);
  }
  int64_t output_memory_quota() const {
    return GetField<int64_t>(VT_OUTPUT_MEMORY_QUOTA, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_CLIENT_NAME) &&
           verifier.VerifyString(client_name()) &&
           VerifyField<int64_t>(verifier, VT_OUTPUT_MEMORY_QUOTA) &&
           verifier.EndTable();
  }
};

struct PlasmaSetOptionsRequestBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_client_name(flatbuffers::Offset<flatbuffers::String> client_name) {
    fbb_.AddOffset(PlasmaSetOptionsRequest::VT_CLIENT_NAME, client_name);
  }
  void add_output_memory_quota(int64_t output_memory_quota) {
    fbb_.AddElement<int64_t>(PlasmaSetOptionsRequest::VT_OUTPUT_MEMORY_QUOTA, output_memory_quota, 0);
  }
  explicit PlasmaSetOptionsRequestBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  PlasmaSetOptionsRequestBuilder &operator=(const PlasmaSetOptionsRequestBuilder &);
  flatbuffers::Offset<PlasmaSetOptionsRequest> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<PlasmaSetOptionsRequest>(end);
    return o;
  }
};

inline flatbuffers::Offset<PlasmaSetOptionsRequest> CreatePlasmaSetOptionsRequest(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> client_name = 0,
    int64_t output_memory_quota = 0) {
  PlasmaSetOptionsRequestBuilder builder_(_fbb);
  builder_.add_output_memory_quota(output_memory_quota);
  builder_.add_client_name(client_name);
  return builder_.Finish();
}

inline flatbuffers::Offset<PlasmaSetOptionsRequest> CreatePlasmaSetOptionsRequestDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *client_name = nullptr,
    int64_t output_memory_quota = 0) {
  auto client_name__ = client_name ? _fbb.CreateString(client_name) : 0;
  return plasma::flatbuf::CreatePlasmaSetOptionsRequest(
      _fbb,
      client_name__,
      output_memory_quota);
}

struct PlasmaSetOptionsReply FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ERROR = 4
  };
  plasma::flatbuf::PlasmaError error() const {
    return static_cast<plasma::flatbuf::PlasmaError>(GetField<int32_t>(VT_ERROR, 0));
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_ERROR) &&
           verifier.EndTable();
  }
};

struct PlasmaSetOptionsReplyBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_error(plasma::flatbuf::PlasmaError error) {
    fbb_.AddElement<int32_t>(PlasmaSetOptionsReply::VT_ERROR, static_cast<int32_t>(error), 0);
  }
  explicit PlasmaSetOptionsReplyBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  PlasmaSetOptionsReplyBuilder &operator=(const PlasmaSetOptionsReplyBuilder &);
  flatbuffers::Offset<PlasmaSetOptionsReply> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<PlasmaSetOptionsReply>(end);
    return o;
  }
};

inline flatbuffers::Offset<PlasmaSetOptionsReply> CreatePlasmaSetOptionsReply(
    flatbuffers::FlatBufferBuilder &_fbb,
    plasma::flatbuf::PlasmaError error = plasma::flatbuf::PlasmaError_OK) {
  PlasmaSetOptionsReplyBuilder builder_(_fbb);
  builder_.add_error(error);
  return builder_.Finish();
}

struct PlasmaGetDebugStringRequest FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
};

struct PlasmaGetDebugStringRequestBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  explicit PlasmaGetDebugStringRequestBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  PlasmaGetDebugStringRequestBuilder &operator=(const PlasmaGetDebugStringRequestBuilder &);
  flatbuffers::Offset<PlasmaGetDebugStringRequest> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<PlasmaGetDebugStringRequest>(end);
    return o;
  }
};

inline flatbuffers::Offset<PlasmaGetDebugStringRequest> CreatePlasmaGetDebugStringRequest(
    flatbuffers::FlatBufferBuilder &_fbb) {
  PlasmaGetDebugStringRequestBuilder builder_(_fbb);
  return builder_.Finish();
}

struct PlasmaGetDebugStringReply FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_DEBUG_STRING = 4
  };
  const flatbuffers::String *debug_string() const {
    return GetPointer<const flatbuffers::String *>(VT_DEBUG_STRING);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_DEBUG_STRING) &&
           verifier.VerifyString(debug_string()) &&
           verifier.EndTable();
  }
};

struct PlasmaGetDebugStringReplyBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_debug_string(flatbuffers::Offset<flatbuffers::String> debug_string) {
    fbb_.AddOffset(PlasmaGetDebugStringReply::VT_DEBUG_STRING, debug_string);
  }
  explicit PlasmaGetDebugStringReplyBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  PlasmaGetDebugStringReplyBuilder &operator=(const PlasmaGetDebugStringReplyBuilder &);
  flatbuffers::Offset<PlasmaGetDebugStringReply> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<PlasmaGetDebugStringReply>(end);
    return o;
  }
};

inline flatbuffers::Offset<PlasmaGetDebugStringReply> CreatePlasmaGetDebugStringReply(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> debug_string = 0) {
  PlasmaGetDebugStringReplyBuilder builder_(_fbb);
  builder_.add_debug_string(debug_string);
  return builder_.Finish();
}

inline flatbuffers::Offset<PlasmaGetDebugStringReply> CreatePlasmaGetDebugStringReplyDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *debug_string = nullptr) {
  auto debug_string__ = debug_string ? _fbb.CreateString(debug_string) : 0;
  return plasma::flatbuf::CreatePlasmaGetDebugStringReply(
      _fbb,
      debug_string__);
}

struct PlasmaCreateRequest FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_OBJECT_ID = 4,
    VT_DATA_SIZE = 6,
    VT_METADATA_SIZE = 8,
    VT_DEVICE_NUM = 10
  };
  const flatbuffers::String *object_id() const {
    return GetPointer<const flatbuffers::String *>(VT_OBJECT_ID);
  }
  uint64_t data_size() const {
    return GetField<uint64_t>(VT_DATA_SIZE, 0);
  }
  uint64_t metadata_size() const {
    return GetField<uint64_t>(VT_METADATA_SIZE, 0);
  }
  int32_t device_num() const {
    return GetField<int32_t>(VT_DEVICE_NUM, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_OBJECT_ID) &&
           verifier.VerifyString(object_id()) &&
           VerifyField<uint64_t>(verifier, VT_DATA_SIZE) &&
           VerifyField<uint64_t>(verifier, VT_METADATA_SIZE) &&
           VerifyField<int32_t>(verifier, VT_DEVICE_NUM) &&
           verifier.EndTable();
  }
};

struct PlasmaCreateRequestBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_object_id(flatbuffers::Offset<flatbuffers::String> object_id) {
    fbb_.AddOffset(PlasmaCreateRequest::VT_OBJECT_ID, object_id);
  }
  void add_data_size(uint64_t data_size) {
    fbb_.AddElement<uint64_t>(PlasmaCreateRequest::VT_DATA_SIZE, data_size, 0);
  }
  void add_metadata_size(uint64_t metadata_size) {
    fbb_.AddElement<uint64_t>(PlasmaCreateRequest::VT_METADATA_SIZE, metadata_size, 0);
  }
  void add_device_num(int32_t device_num) {
    fbb_.AddElement<int32_t>(PlasmaCreateRequest::VT_DEVICE_NUM, device_num, 0);
  }
  explicit PlasmaCreateRequestBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  PlasmaCreateRequestBuilder &operator=(const PlasmaCreateRequestBuilder &);
  flatbuffers::Offset<PlasmaCreateRequest> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<PlasmaCreateRequest>(end);
    return o;
  }
};

inline flatbuffers::Offset<PlasmaCreateRequest> CreatePlasmaCreateRequest(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> object_id = 0,
    uint64_t data_size = 0,
    uint64_t metadata_size = 0,
    int32_t device_num = 0) {
  PlasmaCreateRequestBuilder builder_(_fbb);
  builder_.add_metadata_size(metadata_size);
  builder_.add_data_size(data_size);
  builder_.add_device_num(device_num);
  builder_.add_object_id(object_id);
  return builder_.Finish();
}

inline flatbuffers::Offset<PlasmaCreateRequest> CreatePlasmaCreateRequestDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *object_id = nullptr,
    uint64_t data_size = 0,
    uint64_t metadata_size = 0,
    int32_t device_num = 0) {
  auto object_id__ = object_id ? _fbb.CreateString(object_id) : 0;
  return plasma::flatbuf::CreatePlasmaCreateRequest(
      _fbb,
      object_id__,
      data_size,
      metadata_size,
      device_num);
}

struct CudaHandle FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_HANDLE = 4
  };
  const flatbuffers::Vector<uint8_t> *handle() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_HANDLE);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_HANDLE) &&
           verifier.VerifyVector(handle()) &&
           verifier.EndTable();
  }
};

struct CudaHandleBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_handle(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> handle) {
    fbb_.AddOffset(CudaHandle::VT_HANDLE, handle);
  }
  explicit CudaHandleBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  CudaHandleBuilder &operator=(const CudaHandleBuilder &);
  flatbuffers::Offset<CudaHandle> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<CudaHandle>(end);
    return o;
  }
};

inline flatbuffers::Offset<CudaHandle> CreateCudaHandle(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> handle = 0) {
  CudaHandleBuilder builder_(_fbb);
  builder_.add_handle(handle);
  return builder_.Finish();
}

inline flatbuffers::Offset<CudaHandle> CreateCudaHandleDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<uint8_t> *handle = nullptr) {
  auto handle__ = handle ? _fbb.CreateVector<uint8_t>(*handle) : 0;
  return plasma::flatbuf::CreateCudaHandle(
      _fbb,
      handle__);
}

struct PlasmaCreateReply FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_OBJECT_ID = 4,
    VT_PLASMA_OBJECT = 6,
    VT_ERROR = 8,
    VT_STORE_FD = 10,
    VT_MMAP_SIZE = 12,
    VT_IPC_HANDLE = 14
  };
  const flatbuffers::String *object_id() const {
    return GetPointer<const flatbuffers::String *>(VT_OBJECT_ID);
  }
  const plasma::flatbuf::PlasmaObjectSpec *plasma_object() const {
    return GetStruct<const plasma::flatbuf::PlasmaObjectSpec *>(VT_PLASMA_OBJECT);
  }
  plasma::flatbuf::PlasmaError error() const {
    return static_cast<plasma::flatbuf::PlasmaError>(GetField<int32_t>(VT_ERROR, 0));
  }
  int32_t store_fd() const {
    return GetField<int32_t>(VT_STORE_FD, 0);
  }
  int64_t mmap_size() const {
    return GetField<int64_t>(VT_MMAP_SIZE, 0);
  }
  const plasma::flatbuf::CudaHandle *ipc_handle() const {
    return GetPointer<const plasma::flatbuf::CudaHandle *>(VT_IPC_HANDLE);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_OBJECT_ID) &&
           verifier.VerifyString(object_id()) &&
           VerifyField<plasma::flatbuf::PlasmaObjectSpec>(verifier, VT_PLASMA_OBJECT) &&
           VerifyField<int32_t>(verifier, VT_ERROR) &&
           VerifyField<int32_t>(verifier, VT_STORE_FD) &&
           VerifyField<int64_t>(verifier, VT_MMAP_SIZE) &&
           VerifyOffset(verifier, VT_IPC_HANDLE) &&
           verifier.VerifyTable(ipc_handle()) &&
           verifier.EndTable();
  }
};

struct PlasmaCreateReplyBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_object_id(flatbuffers::Offset<flatbuffers::String> object_id) {
    fbb_.AddOffset(PlasmaCreateReply::VT_OBJECT_ID, object_id);
  }
  void add_plasma_object(const plasma::flatbuf::PlasmaObjectSpec *plasma_object) {
    fbb_.AddStruct(PlasmaCreateReply::VT_PLASMA_OBJECT, plasma_object);
  }
  void add_error(plasma::flatbuf::PlasmaError error) {
    fbb_.AddElement<int32_t>(PlasmaCreateReply::VT_ERROR, static_cast<int32_t>(error), 0);
  }
  void add_store_fd(int32_t store_fd) {
    fbb_.AddElement<int32_t>(PlasmaCreateReply::VT_STORE_FD, store_fd, 0);
  }
  void add_mmap_size(int64_t mmap_size) {
    fbb_.AddElement<int64_t>(PlasmaCreateReply::VT_MMAP_SIZE, mmap_size, 0);
  }
  void add_ipc_handle(flatbuffers::Offset<plasma::flatbuf::CudaHandle> ipc_handle) {
    fbb_.AddOffset(PlasmaCreateReply::VT_IPC_HANDLE, ipc_handle);
  }
  explicit PlasmaCreateReplyBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  PlasmaCreateReplyBuilder &operator=(const PlasmaCreateReplyBuilder &);
  flatbuffers::Offset<PlasmaCreateReply> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<PlasmaCreateReply>(end);
    return o;
  }
};

inline flatbuffers::Offset<PlasmaCreateReply> CreatePlasmaCreateReply(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> object_id = 0,
    const plasma::flatbuf::PlasmaObjectSpec *plasma_object = 0,
    plasma::flatbuf::PlasmaError error = plasma::flatbuf::PlasmaError_OK,
    int32_t store_fd = 0,
    int64_t mmap_size = 0,
    flatbuffers::Offset<plasma::flatbuf::CudaHandle> ipc_handle = 0) {
  PlasmaCreateReplyBuilder builder_(_fbb);
  builder_.add_mmap_size(mmap_size);
  builder_.add_ipc_handle(ipc_handle);
  builder_.add_store_fd(store_fd);
  builder_.add_error(error);
  builder_.add_plasma_object(plasma_object);
  builder_.add_object_id(object_id);
  return builder_.Finish();
}

inline flatbuffers::Offset<PlasmaCreateReply> CreatePlasmaCreateReplyDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *object_id = nullptr,
    const plasma::flatbuf::PlasmaObjectSpec *plasma_object = 0,
    plasma::flatbuf::PlasmaError error = plasma::flatbuf::PlasmaError_OK,
    int32_t store_fd = 0,
    int64_t mmap_size = 0,
    flatbuffers::Offset<plasma::flatbuf::CudaHandle> ipc_handle = 0) {
  auto object_id__ = object_id ? _fbb.CreateString(object_id) : 0;
  return plasma::flatbuf::CreatePlasmaCreateReply(
      _fbb,
      object_id__,
      plasma_object,
      error,
      store_fd,
      mmap_size,
      ipc_handle);
}

struct PlasmaCreateAndSealRequest FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_OBJECT_ID = 4,
    VT_DATA = 6,
    VT_METADATA = 8,
    VT_DIGEST = 10
  };
  const flatbuffers::String *object_id() const {
    return GetPointer<const flatbuffers::String *>(VT_OBJECT_ID);
  }
  const flatbuffers::String *data() const {
    return GetPointer<const flatbuffers::String *>(VT_DATA);
  }
  const flatbuffers::String *metadata() const {
    return GetPointer<const flatbuffers::String *>(VT_METADATA);
  }
  const flatbuffers::String *digest() const {
    return GetPointer<const flatbuffers::String *>(VT_DIGEST);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_OBJECT_ID) &&
           verifier.VerifyString(object_id()) &&
           VerifyOffset(verifier, VT_DATA) &&
           verifier.VerifyString(data()) &&
           VerifyOffset(verifier, VT_METADATA) &&
           verifier.VerifyString(metadata()) &&
           VerifyOffset(verifier, VT_DIGEST) &&
           verifier.VerifyString(digest()) &&
           verifier.EndTable();
  }
};

struct PlasmaCreateAndSealRequestBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_object_id(flatbuffers::Offset<flatbuffers::String> object_id) {
    fbb_.AddOffset(PlasmaCreateAndSealRequest::VT_OBJECT_ID, object_id);
  }
  void add_data(flatbuffers::Offset<flatbuffers::String> data) {
    fbb_.AddOffset(PlasmaCreateAndSealRequest::VT_DATA, data);
  }
  void add_metadata(flatbuffers::Offset<flatbuffers::String> metadata) {
    fbb_.AddOffset(PlasmaCreateAndSealRequest::VT_METADATA, metadata);
  }
  void add_digest(flatbuffers::Offset<flatbuffers::String> digest) {
    fbb_.AddOffset(PlasmaCreateAndSealRequest::VT_DIGEST, digest);
  }
  explicit PlasmaCreateAndSealRequestBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  PlasmaCreateAndSealRequestBuilder &operator=(const PlasmaCreateAndSealRequestBuilder &);
  flatbuffers::Offset<PlasmaCreateAndSealRequest> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<PlasmaCreateAndSealRequest>(end);
    return o;
  }
};

inline flatbuffers::Offset<PlasmaCreateAndSealRequest> CreatePlasmaCreateAndSealRequest(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> object_id = 0,
    flatbuffers::Offset<flatbuffers::String> data = 0,
    flatbuffers::Offset<flatbuffers::String> metadata = 0,
    flatbuffers::Offset<flatbuffers::String> digest = 0) {
  PlasmaCreateAndSealRequestBuilder builder_(_fbb);
  builder_.add_digest(digest);
  builder_.add_metadata(metadata);
  builder_.add_data(data);
  builder_.add_object_id(object_id);
  return builder_.Finish();
}

inline flatbuffers::Offset<PlasmaCreateAndSealRequest> CreatePlasmaCreateAndSealRequestDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *object_id = nullptr,
    const char *data = nullptr,
    const char *metadata = nullptr,
    const char *digest = nullptr) {
  auto object_id__ = object_id ? _fbb.CreateString(object_id) : 0;
  auto data__ = data ? _fbb.CreateString(data) : 0;
  auto metadata__ = metadata ? _fbb.CreateString(metadata) : 0;
  auto digest__ = digest ? _fbb.CreateString(digest) : 0;
  return plasma::flatbuf::CreatePlasmaCreateAndSealRequest(
      _fbb,
      object_id__,
      data__,
      metadata__,
      digest__);
}

struct PlasmaCreateAndSealReply FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ERROR = 4
  };
  plasma::flatbuf::PlasmaError error() const {
    return static_cast<plasma::flatbuf::PlasmaError>(GetField<int32_t>(VT_ERROR, 0));
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_ERROR) &&
           verifier.EndTable();
  }
};

struct PlasmaCreateAndSealReplyBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_error(plasma::flatbuf::PlasmaError error) {
    fbb_.AddElement<int32_t>(PlasmaCreateAndSealReply::VT_ERROR, static_cast<int32_t>(error), 0);
  }
  explicit PlasmaCreateAndSealReplyBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  PlasmaCreateAndSealReplyBuilder &operator=(const PlasmaCreateAndSealReplyBuilder &);
  flatbuffers::Offset<PlasmaCreateAndSealReply> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<PlasmaCreateAndSealReply>(end);
    return o;
  }
};

inline flatbuffers::Offset<PlasmaCreateAndSealReply> CreatePlasmaCreateAndSealReply(
    flatbuffers::FlatBufferBuilder &_fbb,
    plasma::flatbuf::PlasmaError error = plasma::flatbuf::PlasmaError_OK) {
  PlasmaCreateAndSealReplyBuilder builder_(_fbb);
  builder_.add_error(error);
  return builder_.Finish();
}

struct PlasmaCreateAndSealBatchRequest FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_OBJECT_IDS = 4,
    VT_DATA = 6,
    VT_METADATA = 8,
    VT_DIGEST = 10
  };
  const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *object_ids() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *>(VT_OBJECT_IDS);
  }
  const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *data() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *>(VT_DATA);
  }
  const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *metadata() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *>(VT_METADATA);
  }
  const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *digest() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *>(VT_DIGEST);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_OBJECT_IDS) &&
           verifier.VerifyVector(object_ids()) &&
           verifier.VerifyVectorOfStrings(object_ids()) &&
           VerifyOffset(verifier, VT_DATA) &&
           verifier.VerifyVector(data()) &&
           verifier.VerifyVectorOfStrings(data()) &&
           VerifyOffset(verifier, VT_METADATA) &&
           verifier.VerifyVector(metadata()) &&
           verifier.VerifyVectorOfStrings(metadata()) &&
           VerifyOffset(verifier, VT_DIGEST) &&
           verifier.VerifyVector(digest()) &&
           verifier.VerifyVectorOfStrings(digest()) &&
           verifier.EndTable();
  }
};

struct PlasmaCreateAndSealBatchRequestBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_object_ids(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> object_ids) {
    fbb_.AddOffset(PlasmaCreateAndSealBatchRequest::VT_OBJECT_IDS, object_ids);
  }
  void add_data(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> data) {
    fbb_.AddOffset(PlasmaCreateAndSealBatchRequest::VT_DATA, data);
  }
  void add_metadata(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> metadata) {
    fbb_.AddOffset(PlasmaCreateAndSealBatchRequest::VT_METADATA, metadata);
  }
  void add_digest(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> digest) {
    fbb_.AddOffset(PlasmaCreateAndSealBatchRequest::VT_DIGEST, digest);
  }
  explicit PlasmaCreateAndSealBatchRequestBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  PlasmaCreateAndSealBatchRequestBuilder &operator=(const PlasmaCreateAndSealBatchRequestBuilder &);
  flatbuffers::Offset<PlasmaCreateAndSealBatchRequest> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<PlasmaCreateAndSealBatchRequest>(end);
    return o;
  }
};

inline flatbuffers::Offset<PlasmaCreateAndSealBatchRequest> CreatePlasmaCreateAndSealBatchRequest(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> object_ids = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> data = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> metadata = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> digest = 0) {
  PlasmaCreateAndSealBatchRequestBuilder builder_(_fbb);
  builder_.add_digest(digest);
  builder_.add_metadata(metadata);
  builder_.add_data(data);
  builder_.add_object_ids(object_ids);
  return builder_.Finish();
}

inline flatbuffers::Offset<PlasmaCreateAndSealBatchRequest> CreatePlasmaCreateAndSealBatchRequestDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<flatbuffers::Offset<flatbuffers::String>> *object_ids = nullptr,
    const std::vector<flatbuffers::Offset<flatbuffers::String>> *data = nullptr,
    const std::vector<flatbuffers::Offset<flatbuffers::String>> *metadata = nullptr,
    const std::vector<flatbuffers::Offset<flatbuffers::String>> *digest = nullptr) {
  auto object_ids__ = object_ids ? _fbb.CreateVector<flatbuffers::Offset<flatbuffers::String>>(*object_ids) : 0;
  auto data__ = data ? _fbb.CreateVector<flatbuffers::Offset<flatbuffers::String>>(*data) : 0;
  auto metadata__ = metadata ? _fbb.CreateVector<flatbuffers::Offset<flatbuffers::String>>(*metadata) : 0;
  auto digest__ = digest ? _fbb.CreateVector<flatbuffers::Offset<flatbuffers::String>>(*digest) : 0;
  return plasma::flatbuf::CreatePlasmaCreateAndSealBatchRequest(
      _fbb,
      object_ids__,
      data__,
      metadata__,
      digest__);
}

struct PlasmaCreateAndSealBatchReply FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ERROR = 4
  };
  plasma::flatbuf::PlasmaError error() const {
    return static_cast<plasma::flatbuf::PlasmaError>(GetField<int32_t>(VT_ERROR, 0));
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_ERROR) &&
           verifier.EndTable();
  }
};

struct PlasmaCreateAndSealBatchReplyBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_error(plasma::flatbuf::PlasmaError error) {
    fbb_.AddElement<int32_t>(PlasmaCreateAndSealBatchReply::VT_ERROR, static_cast<int32_t>(error), 0);
  }
  explicit PlasmaCreateAndSealBatchReplyBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  PlasmaCreateAndSealBatchReplyBuilder &operator=(const PlasmaCreateAndSealBatchReplyBuilder &);
  flatbuffers::Offset<PlasmaCreateAndSealBatchReply> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<PlasmaCreateAndSealBatchReply>(end);
    return o;
  }
};

inline flatbuffers::Offset<PlasmaCreateAndSealBatchReply> CreatePlasmaCreateAndSealBatchReply(
    flatbuffers::FlatBufferBuilder &_fbb,
    plasma::flatbuf::PlasmaError error = plasma::flatbuf::PlasmaError_OK) {
  PlasmaCreateAndSealBatchReplyBuilder builder_(_fbb);
  builder_.add_error(error);
  return builder_.Finish();
}

struct PlasmaAbortRequest FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_OBJECT_ID = 4
  };
  const flatbuffers::String *object_id() const {
    return GetPointer<const flatbuffers::String *>(VT_OBJECT_ID);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_OBJECT_ID) &&
           verifier.VerifyString(object_id()) &&
           verifier.EndTable();
  }
};

struct PlasmaAbortRequestBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_object_id(flatbuffers::Offset<flatbuffers::String> object_id) {
    fbb_.AddOffset(PlasmaAbortRequest::VT_OBJECT_ID, object_id);
  }
  explicit PlasmaAbortRequestBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  PlasmaAbortRequestBuilder &operator=(const PlasmaAbortRequestBuilder &);
  flatbuffers::Offset<PlasmaAbortRequest> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<PlasmaAbortRequest>(end);
    return o;
  }
};

inline flatbuffers::Offset<PlasmaAbortRequest> CreatePlasmaAbortRequest(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> object_id = 0) {
  PlasmaAbortRequestBuilder builder_(_fbb);
  builder_.add_object_id(object_id);
  return builder_.Finish();
}

inline flatbuffers::Offset<PlasmaAbortRequest> CreatePlasmaAbortRequestDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *object_id = nullptr) {
  auto object_id__ = object_id ? _fbb.CreateString(object_id) : 0;
  return plasma::flatbuf::CreatePlasmaAbortRequest(
      _fbb,
      object_id__);
}

struct PlasmaAbortReply FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_OBJECT_ID = 4
  };
  const flatbuffers::String *object_id() const {
    return GetPointer<const flatbuffers::String *>(VT_OBJECT_ID);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_OBJECT_ID) &&
           verifier.VerifyString(object_id()) &&
           verifier.EndTable();
  }
};

struct PlasmaAbortReplyBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_object_id(flatbuffers::Offset<flatbuffers::String> object_id) {
    fbb_.AddOffset(PlasmaAbortReply::VT_OBJECT_ID, object_id);
  }
  explicit PlasmaAbortReplyBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  PlasmaAbortReplyBuilder &operator=(const PlasmaAbortReplyBuilder &);
  flatbuffers::Offset<PlasmaAbortReply> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<PlasmaAbortReply>(end);
    return o;
  }
};

inline flatbuffers::Offset<PlasmaAbortReply> CreatePlasmaAbortReply(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> object_id = 0) {
  PlasmaAbortReplyBuilder builder_(_fbb);
  builder_.add_object_id(object_id);
  return builder_.Finish();
}

inline flatbuffers::Offset<PlasmaAbortReply> CreatePlasmaAbortReplyDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *object_id = nullptr) {
  auto object_id__ = object_id ? _fbb.CreateString(object_id) : 0;
  return plasma::flatbuf::CreatePlasmaAbortReply(
      _fbb,
      object_id__);
}

struct PlasmaSealRequest FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_OBJECT_ID = 4,
    VT_DIGEST = 6
  };
  const flatbuffers::String *object_id() const {
    return GetPointer<const flatbuffers::String *>(VT_OBJECT_ID);
  }
  const flatbuffers::String *digest() const {
    return GetPointer<const flatbuffers::String *>(VT_DIGEST);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_OBJECT_ID) &&
           verifier.VerifyString(object_id()) &&
           VerifyOffset(verifier, VT_DIGEST) &&
           verifier.VerifyString(digest()) &&
           verifier.EndTable();
  }
};

struct PlasmaSealRequestBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_object_id(flatbuffers::Offset<flatbuffers::String> object_id) {
    fbb_.AddOffset(PlasmaSealRequest::VT_OBJECT_ID, object_id);
  }
  void add_digest(flatbuffers::Offset<flatbuffers::String> digest) {
    fbb_.AddOffset(PlasmaSealRequest::VT_DIGEST, digest);
  }
  explicit PlasmaSealRequestBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  PlasmaSealRequestBuilder &operator=(const PlasmaSealRequestBuilder &);
  flatbuffers::Offset<PlasmaSealRequest> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<PlasmaSealRequest>(end);
    return o;
  }
};

inline flatbuffers::Offset<PlasmaSealRequest> CreatePlasmaSealRequest(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> object_id = 0,
    flatbuffers::Offset<flatbuffers::String> digest = 0) {
  PlasmaSealRequestBuilder builder_(_fbb);
  builder_.add_digest(digest);
  builder_.add_object_id(object_id);
  return builder_.Finish();
}

inline flatbuffers::Offset<PlasmaSealRequest> CreatePlasmaSealRequestDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *object_id = nullptr,
    const char *digest = nullptr) {
  auto object_id__ = object_id ? _fbb.CreateString(object_id) : 0;
  auto digest__ = digest ? _fbb.CreateString(digest) : 0;
  return plasma::flatbuf::CreatePlasmaSealRequest(
      _fbb,
      object_id__,
      digest__);
}

struct PlasmaSealReply FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_OBJECT_ID = 4,
    VT_ERROR = 6
  };
  const flatbuffers::String *object_id() const {
    return GetPointer<const flatbuffers::String *>(VT_OBJECT_ID);
  }
  plasma::flatbuf::PlasmaError error() const {
    return static_cast<plasma::flatbuf::PlasmaError>(GetField<int32_t>(VT_ERROR, 0));
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_OBJECT_ID) &&
           verifier.VerifyString(object_id()) &&
           VerifyField<int32_t>(verifier, VT_ERROR) &&
           verifier.EndTable();
  }
};

struct PlasmaSealReplyBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_object_id(flatbuffers::Offset<flatbuffers::String> object_id) {
    fbb_.AddOffset(PlasmaSealReply::VT_OBJECT_ID, object_id);
  }
  void add_error(plasma::flatbuf::PlasmaError error) {
    fbb_.AddElement<int32_t>(PlasmaSealReply::VT_ERROR, static_cast<int32_t>(error), 0);
  }
  explicit PlasmaSealReplyBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  PlasmaSealReplyBuilder &operator=(const PlasmaSealReplyBuilder &);
  flatbuffers::Offset<PlasmaSealReply> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<PlasmaSealReply>(end);
    return o;
  }
};

inline flatbuffers::Offset<PlasmaSealReply> CreatePlasmaSealReply(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> object_id = 0,
    plasma::flatbuf::PlasmaError error = plasma::flatbuf::PlasmaError_OK) {
  PlasmaSealReplyBuilder builder_(_fbb);
  builder_.add_error(error);
  builder_.add_object_id(object_id);
  return builder_.Finish();
}

inline flatbuffers::Offset<PlasmaSealReply> CreatePlasmaSealReplyDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *object_id = nullptr,
    plasma::flatbuf::PlasmaError error = plasma::flatbuf::PlasmaError_OK) {
  auto object_id__ = object_id ? _fbb.CreateString(object_id) : 0;
  return plasma::flatbuf::CreatePlasmaSealReply(
      _fbb,
      object_id__,
      error);
}

struct PlasmaMetricsRequest FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
};

struct PlasmaMetricsRequestBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  explicit PlasmaMetricsRequestBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  PlasmaMetricsRequestBuilder &operator=(const PlasmaMetricsRequestBuilder &);
  flatbuffers::Offset<PlasmaMetricsRequest> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<PlasmaMetricsRequest>(end);
    return o;
  }
};

inline flatbuffers::Offset<PlasmaMetricsRequest> CreatePlasmaMetricsRequest(
    flatbuffers::FlatBufferBuilder &_fbb) {
  PlasmaMetricsRequestBuilder builder_(_fbb);
  return builder_.Finish();
}

struct PlasmaMetricsReply FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_METRICS = 4
  };
  const plasma::flatbuf::PlasmaMetrics *metrics() const {
    return GetStruct<const plasma::flatbuf::PlasmaMetrics *>(VT_METRICS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<plasma::flatbuf::PlasmaMetrics>(verifier, VT_METRICS) &&
           verifier.EndTable();
  }
};

struct PlasmaMetricsReplyBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_metrics(const plasma::flatbuf::PlasmaMetrics *metrics) {
    fbb_.AddStruct(PlasmaMetricsReply::VT_METRICS, metrics);
  }
  explicit PlasmaMetricsReplyBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  PlasmaMetricsReplyBuilder &operator=(const PlasmaMetricsReplyBuilder &);
  flatbuffers::Offset<PlasmaMetricsReply> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<PlasmaMetricsReply>(end);
    return o;
  }
};

inline flatbuffers::Offset<PlasmaMetricsReply> CreatePlasmaMetricsReply(
    flatbuffers::FlatBufferBuilder &_fbb,
    const plasma::flatbuf::PlasmaMetrics *metrics = 0) {
  PlasmaMetricsReplyBuilder builder_(_fbb);
  builder_.add_metrics(metrics);
  return builder_.Finish();
}

struct PlasmaGetRequest FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_OBJECT_IDS = 4,
    VT_TIMEOUT_MS = 6
  };
  const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *object_ids() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *>(VT_OBJECT_IDS);
  }
  int64_t timeout_ms() const {
    return GetField<int64_t>(VT_TIMEOUT_MS, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_OBJECT_IDS) &&
           verifier.VerifyVector(object_ids()) &&
           verifier.VerifyVectorOfStrings(object_ids()) &&
           VerifyField<int64_t>(verifier, VT_TIMEOUT_MS) &&
           verifier.EndTable();
  }
};

struct PlasmaGetRequestBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_object_ids(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> object_ids) {
    fbb_.AddOffset(PlasmaGetRequest::VT_OBJECT_IDS, object_ids);
  }
  void add_timeout_ms(int64_t timeout_ms) {
    fbb_.AddElement<int64_t>(PlasmaGetRequest::VT_TIMEOUT_MS, timeout_ms, 0);
  }
  explicit PlasmaGetRequestBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  PlasmaGetRequestBuilder &operator=(const PlasmaGetRequestBuilder &);
  flatbuffers::Offset<PlasmaGetRequest> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<PlasmaGetRequest>(end);
    return o;
  }
};

inline flatbuffers::Offset<PlasmaGetRequest> CreatePlasmaGetRequest(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> object_ids = 0,
    int64_t timeout_ms = 0) {
  PlasmaGetRequestBuilder builder_(_fbb);
  builder_.add_timeout_ms(timeout_ms);
  builder_.add_object_ids(object_ids);
  return builder_.Finish();
}

inline flatbuffers::Offset<PlasmaGetRequest> CreatePlasmaGetRequestDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<flatbuffers::Offset<flatbuffers::String>> *object_ids = nullptr,
    int64_t timeout_ms = 0) {
  auto object_ids__ = object_ids ? _fbb.CreateVector<flatbuffers::Offset<flatbuffers::String>>(*object_ids) : 0;
  return plasma::flatbuf::CreatePlasmaGetRequest(
      _fbb,
      object_ids__,
      timeout_ms);
}

struct PlasmaGetReply FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_OBJECT_IDS = 4,
    VT_PLASMA_OBJECTS = 6,
    VT_STORE_FDS = 8,
    VT_MMAP_SIZES = 10,
    VT_HANDLES = 12
  };
  const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *object_ids() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *>(VT_OBJECT_IDS);
  }
  const flatbuffers::Vector<const plasma::flatbuf::PlasmaObjectSpec *> *plasma_objects() const {
    return GetPointer<const flatbuffers::Vector<const plasma::flatbuf::PlasmaObjectSpec *> *>(VT_PLASMA_OBJECTS);
  }
  const flatbuffers::Vector<int32_t> *store_fds() const {
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_STORE_FDS);
  }
  const flatbuffers::Vector<int64_t> *mmap_sizes() const {
    return GetPointer<const flatbuffers::Vector<int64_t> *>(VT_MMAP_SIZES);
  }
  const flatbuffers::Vector<flatbuffers::Offset<plasma::flatbuf::CudaHandle>> *handles() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<plasma::flatbuf::CudaHandle>> *>(VT_HANDLES);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_OBJECT_IDS) &&
           verifier.VerifyVector(object_ids()) &&
           verifier.VerifyVectorOfStrings(object_ids()) &&
           VerifyOffset(verifier, VT_PLASMA_OBJECTS) &&
           verifier.VerifyVector(plasma_objects()) &&
           VerifyOffset(verifier, VT_STORE_FDS) &&
           verifier.VerifyVector(store_fds()) &&
           VerifyOffset(verifier, VT_MMAP_SIZES) &&
           verifier.VerifyVector(mmap_sizes()) &&
           VerifyOffset(verifier, VT_HANDLES) &&
           verifier.VerifyVector(handles()) &&
           verifier.VerifyVectorOfTables(handles()) &&
           verifier.EndTable();
  }
};

struct PlasmaGetReplyBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_object_ids(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> object_ids) {
    fbb_.AddOffset(PlasmaGetReply::VT_OBJECT_IDS, object_ids);
  }
  void add_plasma_objects(flatbuffers::Offset<flatbuffers::Vector<const plasma::flatbuf::PlasmaObjectSpec *>> plasma_objects) {
    fbb_.AddOffset(PlasmaGetReply::VT_PLASMA_OBJECTS, plasma_objects);
  }
  void add_store_fds(flatbuffers::Offset<flatbuffers::Vector<int32_t>> store_fds) {
    fbb_.AddOffset(PlasmaGetReply::VT_STORE_FDS, store_fds);
  }
  void add_mmap_sizes(flatbuffers::Offset<flatbuffers::Vector<int64_t>> mmap_sizes) {
    fbb_.AddOffset(PlasmaGetReply::VT_MMAP_SIZES, mmap_sizes);
  }
  void add_handles(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<plasma::flatbuf::CudaHandle>>> handles) {
    fbb_.AddOffset(PlasmaGetReply::VT_HANDLES, handles);
  }
  explicit PlasmaGetReplyBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  PlasmaGetReplyBuilder &operator=(const PlasmaGetReplyBuilder &);
  flatbuffers::Offset<PlasmaGetReply> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<PlasmaGetReply>(end);
    return o;
  }
};

inline flatbuffers::Offset<PlasmaGetReply> CreatePlasmaGetReply(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> object_ids = 0,
    flatbuffers::Offset<flatbuffers::Vector<const plasma::flatbuf::PlasmaObjectSpec *>> plasma_objects = 0,
    flatbuffers::Offset<flatbuffers::Vector<int32_t>> store_fds = 0,
    flatbuffers::Offset<flatbuffers::Vector<int64_t>> mmap_sizes = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<plasma::flatbuf::CudaHandle>>> handles = 0) {
  PlasmaGetReplyBuilder builder_(_fbb);
  builder_.add_handles(handles);
  builder_.add_mmap_sizes(mmap_sizes);
  builder_.add_store_fds(store_fds);
  builder_.add_plasma_objects(plasma_objects);
  builder_.add_object_ids(object_ids);
  return builder_.Finish();
}

inline flatbuffers::Offset<PlasmaGetReply> CreatePlasmaGetReplyDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<flatbuffers::Offset<flatbuffers::String>> *object_ids = nullptr,
    const std::vector<plasma::flatbuf::PlasmaObjectSpec> *plasma_objects = nullptr,
    const std::vector<int32_t> *store_fds = nullptr,
    const std::vector<int64_t> *mmap_sizes = nullptr,
    const std::vector<flatbuffers::Offset<plasma::flatbuf::CudaHandle>> *handles = nullptr) {
  auto object_ids__ = object_ids ? _fbb.CreateVector<flatbuffers::Offset<flatbuffers::String>>(*object_ids) : 0;
  auto plasma_objects__ = plasma_objects ? _fbb.CreateVectorOfStructs<plasma::flatbuf::PlasmaObjectSpec>(*plasma_objects) : 0;
  auto store_fds__ = store_fds ? _fbb.CreateVector<int32_t>(*store_fds) : 0;
  auto mmap_sizes__ = mmap_sizes ? _fbb.CreateVector<int64_t>(*mmap_sizes) : 0;
  auto handles__ = handles ? _fbb.CreateVector<flatbuffers::Offset<plasma::flatbuf::CudaHandle>>(*handles) : 0;
  return plasma::flatbuf::CreatePlasmaGetReply(
      _fbb,
      object_ids__,
      plasma_objects__,
      store_fds__,
      mmap_sizes__,
      handles__);
}

struct PlasmaReleaseRequest FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_OBJECT_ID = 4
  };
  const flatbuffers::String *object_id() const {
    return GetPointer<const flatbuffers::String *>(VT_OBJECT_ID);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_OBJECT_ID) &&
           verifier.VerifyString(object_id()) &&
           verifier.EndTable();
  }
};

struct PlasmaReleaseRequestBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_object_id(flatbuffers::Offset<flatbuffers::String> object_id) {
    fbb_.AddOffset(PlasmaReleaseRequest::VT_OBJECT_ID, object_id);
  }
  explicit PlasmaReleaseRequestBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  PlasmaReleaseRequestBuilder &operator=(const PlasmaReleaseRequestBuilder &);
  flatbuffers::Offset<PlasmaReleaseRequest> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<PlasmaReleaseRequest>(end);
    return o;
  }
};

inline flatbuffers::Offset<PlasmaReleaseRequest> CreatePlasmaReleaseRequest(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> object_id = 0) {
  PlasmaReleaseRequestBuilder builder_(_fbb);
  builder_.add_object_id(object_id);
  return builder_.Finish();
}

inline flatbuffers::Offset<PlasmaReleaseRequest> CreatePlasmaReleaseRequestDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *object_id = nullptr) {
  auto object_id__ = object_id ? _fbb.CreateString(object_id) : 0;
  return plasma::flatbuf::CreatePlasmaReleaseRequest(
      _fbb,
      object_id__);
}

struct PlasmaReleaseReply FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_OBJECT_ID = 4,
    VT_ERROR = 6
  };
  const flatbuffers::String *object_id() const {
    return GetPointer<const flatbuffers::String *>(VT_OBJECT_ID);
  }
  plasma::flatbuf::PlasmaError error() const {
    return static_cast<plasma::flatbuf::PlasmaError>(GetField<int32_t>(VT_ERROR, 0));
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_OBJECT_ID) &&
           verifier.VerifyString(object_id()) &&
           VerifyField<int32_t>(verifier, VT_ERROR) &&
           verifier.EndTable();
  }
};

struct PlasmaReleaseReplyBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_object_id(flatbuffers::Offset<flatbuffers::String> object_id) {
    fbb_.AddOffset(PlasmaReleaseReply::VT_OBJECT_ID, object_id);
  }
  void add_error(plasma::flatbuf::PlasmaError error) {
    fbb_.AddElement<int32_t>(PlasmaReleaseReply::VT_ERROR, static_cast<int32_t>(error), 0);
  }
  explicit PlasmaReleaseReplyBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  PlasmaReleaseReplyBuilder &operator=(const PlasmaReleaseReplyBuilder &);
  flatbuffers::Offset<PlasmaReleaseReply> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<PlasmaReleaseReply>(end);
    return o;
  }
};

inline flatbuffers::Offset<PlasmaReleaseReply> CreatePlasmaReleaseReply(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> object_id = 0,
    plasma::flatbuf::PlasmaError error = plasma::flatbuf::PlasmaError_OK) {
  PlasmaReleaseReplyBuilder builder_(_fbb);
  builder_.add_error(error);
  builder_.add_object_id(object_id);
  return builder_.Finish();
}

inline flatbuffers::Offset<PlasmaReleaseReply> CreatePlasmaReleaseReplyDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *object_id = nullptr,
    plasma::flatbuf::PlasmaError error = plasma::flatbuf::PlasmaError_OK) {
  auto object_id__ = object_id ? _fbb.CreateString(object_id) : 0;
  return plasma::flatbuf::CreatePlasmaReleaseReply(
      _fbb,
      object_id__,
      error);
}

struct PlasmaDeleteRequest FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_COUNT = 4,
    VT_OBJECT_IDS = 6
  };
  int32_t count() const {
    return GetField<int32_t>(VT_COUNT, 0);
  }
  const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *object_ids() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *>(VT_OBJECT_IDS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_COUNT) &&
           VerifyOffset(verifier, VT_OBJECT_IDS) &&
           verifier.VerifyVector(object_ids()) &&
           verifier.VerifyVectorOfStrings(object_ids()) &&
           verifier.EndTable();
  }
};

struct PlasmaDeleteRequestBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_count(int32_t count) {
    fbb_.AddElement<int32_t>(PlasmaDeleteRequest::VT_COUNT, count, 0);
  }
  void add_object_ids(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> object_ids) {
    fbb_.AddOffset(PlasmaDeleteRequest::VT_OBJECT_IDS, object_ids);
  }
  explicit PlasmaDeleteRequestBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  PlasmaDeleteRequestBuilder &operator=(const PlasmaDeleteRequestBuilder &);
  flatbuffers::Offset<PlasmaDeleteRequest> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<PlasmaDeleteRequest>(end);
    return o;
  }
};

inline flatbuffers::Offset<PlasmaDeleteRequest> CreatePlasmaDeleteRequest(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t count = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> object_ids = 0) {
  PlasmaDeleteRequestBuilder builder_(_fbb);
  builder_.add_object_ids(object_ids);
  builder_.add_count(count);
  return builder_.Finish();
}

inline flatbuffers::Offset<PlasmaDeleteRequest> CreatePlasmaDeleteRequestDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t count = 0,
    const std::vector<flatbuffers::Offset<flatbuffers::String>> *object_ids = nullptr) {
  auto object_ids__ = object_ids ? _fbb.CreateVector<flatbuffers::Offset<flatbuffers::String>>(*object_ids) : 0;
  return plasma::flatbuf::CreatePlasmaDeleteRequest(
      _fbb,
      count,
      object_ids__);
}

struct PlasmaDeleteReply FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_COUNT = 4,
    VT_OBJECT_IDS = 6,
    VT_ERRORS = 8
  };
  int32_t count() const {
    return GetField<int32_t>(VT_COUNT, 0);
  }
  const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *object_ids() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *>(VT_OBJECT_IDS);
  }
  const flatbuffers::Vector<int32_t> *errors() const {
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_ERRORS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_COUNT) &&
           VerifyOffset(verifier, VT_OBJECT_IDS) &&
           verifier.VerifyVector(object_ids()) &&
           verifier.VerifyVectorOfStrings(object_ids()) &&
           VerifyOffset(verifier, VT_ERRORS) &&
           verifier.VerifyVector(errors()) &&
           verifier.EndTable();
  }
};

struct PlasmaDeleteReplyBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_count(int32_t count) {
    fbb_.AddElement<int32_t>(PlasmaDeleteReply::VT_COUNT, count, 0);
  }
  void add_object_ids(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> object_ids) {
    fbb_.AddOffset(PlasmaDeleteReply::VT_OBJECT_IDS, object_ids);
  }
  void add_errors(flatbuffers::Offset<flatbuffers::Vector<int32_t>> errors) {
    fbb_.AddOffset(PlasmaDeleteReply::VT_ERRORS, errors);
  }
  explicit PlasmaDeleteReplyBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  PlasmaDeleteReplyBuilder &operator=(const PlasmaDeleteReplyBuilder &);
  flatbuffers::Offset<PlasmaDeleteReply> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<PlasmaDeleteReply>(end);
    return o;
  }
};

inline flatbuffers::Offset<PlasmaDeleteReply> CreatePlasmaDeleteReply(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t count = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> object_ids = 0,
    flatbuffers::Offset<flatbuffers::Vector<int32_t>> errors = 0) {
  PlasmaDeleteReplyBuilder builder_(_fbb);
  builder_.add_errors(errors);
  builder_.add_object_ids(object_ids);
  builder_.add_count(count);
  return builder_.Finish();
}

inline flatbuffers::Offset<PlasmaDeleteReply> CreatePlasmaDeleteReplyDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t count = 0,
    const std::vector<flatbuffers::Offset<flatbuffers::String>> *object_ids = nullptr,
    const std::vector<int32_t> *errors = nullptr) {
  auto object_ids__ = object_ids ? _fbb.CreateVector<flatbuffers::Offset<flatbuffers::String>>(*object_ids) : 0;
  auto errors__ = errors ? _fbb.CreateVector<int32_t>(*errors) : 0;
  return plasma::flatbuf::CreatePlasmaDeleteReply(
      _fbb,
      count,
      object_ids__,
      errors__);
}

struct PlasmaContainsRequest FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_OBJECT_ID = 4
  };
  const flatbuffers::String *object_id() const {
    return GetPointer<const flatbuffers::String *>(VT_OBJECT_ID);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_OBJECT_ID) &&
           verifier.VerifyString(object_id()) &&
           verifier.EndTable();
  }
};

struct PlasmaContainsRequestBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_object_id(flatbuffers::Offset<flatbuffers::String> object_id) {
    fbb_.AddOffset(PlasmaContainsRequest::VT_OBJECT_ID, object_id);
  }
  explicit PlasmaContainsRequestBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  PlasmaContainsRequestBuilder &operator=(const PlasmaContainsRequestBuilder &);
  flatbuffers::Offset<PlasmaContainsRequest> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<PlasmaContainsRequest>(end);
    return o;
  }
};

inline flatbuffers::Offset<PlasmaContainsRequest> CreatePlasmaContainsRequest(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> object_id = 0) {
  PlasmaContainsRequestBuilder builder_(_fbb);
  builder_.add_object_id(object_id);
  return builder_.Finish();
}

inline flatbuffers::Offset<PlasmaContainsRequest> CreatePlasmaContainsRequestDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *object_id = nullptr) {
  auto object_id__ = object_id ? _fbb.CreateString(object_id) : 0;
  return plasma::flatbuf::CreatePlasmaContainsRequest(
      _fbb,
      object_id__);
}

struct PlasmaContainsReply FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_OBJECT_ID = 4,
    VT_HAS_OBJECT = 6
  };
  const flatbuffers::String *object_id() const {
    return GetPointer<const flatbuffers::String *>(VT_OBJECT_ID);
  }
  int32_t has_object() const {
    return GetField<int32_t>(VT_HAS_OBJECT, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_OBJECT_ID) &&
           verifier.VerifyString(object_id()) &&
           VerifyField<int32_t>(verifier, VT_HAS_OBJECT) &&
           verifier.EndTable();
  }
};

struct PlasmaContainsReplyBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_object_id(flatbuffers::Offset<flatbuffers::String> object_id) {
    fbb_.AddOffset(PlasmaContainsReply::VT_OBJECT_ID, object_id);
  }
  void add_has_object(int32_t has_object) {
    fbb_.AddElement<int32_t>(PlasmaContainsReply::VT_HAS_OBJECT, has_object, 0);
  }
  explicit PlasmaContainsReplyBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  PlasmaContainsReplyBuilder &operator=(const PlasmaContainsReplyBuilder &);
  flatbuffers::Offset<PlasmaContainsReply> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<PlasmaContainsReply>(end);
    return o;
  }
};

inline flatbuffers::Offset<PlasmaContainsReply> CreatePlasmaContainsReply(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> object_id = 0,
    int32_t has_object = 0) {
  PlasmaContainsReplyBuilder builder_(_fbb);
  builder_.add_has_object(has_object);
  builder_.add_object_id(object_id);
  return builder_.Finish();
}

inline flatbuffers::Offset<PlasmaContainsReply> CreatePlasmaContainsReplyDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *object_id = nullptr,
    int32_t has_object = 0) {
  auto object_id__ = object_id ? _fbb.CreateString(object_id) : 0;
  return plasma::flatbuf::CreatePlasmaContainsReply(
      _fbb,
      object_id__,
      has_object);
}

struct PlasmaListRequest FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
};

struct PlasmaListRequestBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  explicit PlasmaListRequestBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  PlasmaListRequestBuilder &operator=(const PlasmaListRequestBuilder &);
  flatbuffers::Offset<PlasmaListRequest> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<PlasmaListRequest>(end);
    return o;
  }
};

inline flatbuffers::Offset<PlasmaListRequest> CreatePlasmaListRequest(
    flatbuffers::FlatBufferBuilder &_fbb) {
  PlasmaListRequestBuilder builder_(_fbb);
  return builder_.Finish();
}

struct PlasmaListReply FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_OBJECTS = 4
  };
  const flatbuffers::Vector<flatbuffers::Offset<plasma::flatbuf::ObjectInfo>> *objects() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<plasma::flatbuf::ObjectInfo>> *>(VT_OBJECTS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_OBJECTS) &&
           verifier.VerifyVector(objects()) &&
           verifier.VerifyVectorOfTables(objects()) &&
           verifier.EndTable();
  }
};

struct PlasmaListReplyBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_objects(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<plasma::flatbuf::ObjectInfo>>> objects) {
    fbb_.AddOffset(PlasmaListReply::VT_OBJECTS, objects);
  }
  explicit PlasmaListReplyBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  PlasmaListReplyBuilder &operator=(const PlasmaListReplyBuilder &);
  flatbuffers::Offset<PlasmaListReply> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<PlasmaListReply>(end);
    return o;
  }
};

inline flatbuffers::Offset<PlasmaListReply> CreatePlasmaListReply(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<plasma::flatbuf::ObjectInfo>>> objects = 0) {
  PlasmaListReplyBuilder builder_(_fbb);
  builder_.add_objects(objects);
  return builder_.Finish();
}

inline flatbuffers::Offset<PlasmaListReply> CreatePlasmaListReplyDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<flatbuffers::Offset<plasma::flatbuf::ObjectInfo>> *objects = nullptr) {
  auto objects__ = objects ? _fbb.CreateVector<flatbuffers::Offset<plasma::flatbuf::ObjectInfo>>(*objects) : 0;
  return plasma::flatbuf::CreatePlasmaListReply(
      _fbb,
      objects__);
}

struct PlasmaConnectRequest FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
};

struct PlasmaConnectRequestBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  explicit PlasmaConnectRequestBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  PlasmaConnectRequestBuilder &operator=(const PlasmaConnectRequestBuilder &);
  flatbuffers::Offset<PlasmaConnectRequest> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<PlasmaConnectRequest>(end);
    return o;
  }
};

inline flatbuffers::Offset<PlasmaConnectRequest> CreatePlasmaConnectRequest(
    flatbuffers::FlatBufferBuilder &_fbb) {
  PlasmaConnectRequestBuilder builder_(_fbb);
  return builder_.Finish();
}

struct PlasmaConnectReply FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_MEMORY_CAPACITY = 4
  };
  int64_t memory_capacity() const {
    return GetField<int64_t>(VT_MEMORY_CAPACITY, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int64_t>(verifier, VT_MEMORY_CAPACITY) &&
           verifier.EndTable();
  }
};

struct PlasmaConnectReplyBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_memory_capacity(int64_t memory_capacity) {
    fbb_.AddElement<int64_t>(PlasmaConnectReply::VT_MEMORY_CAPACITY, memory_capacity, 0);
  }
  explicit PlasmaConnectReplyBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  PlasmaConnectReplyBuilder &operator=(const PlasmaConnectReplyBuilder &);
  flatbuffers::Offset<PlasmaConnectReply> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<PlasmaConnectReply>(end);
    return o;
  }
};

inline flatbuffers::Offset<PlasmaConnectReply> CreatePlasmaConnectReply(
    flatbuffers::FlatBufferBuilder &_fbb,
    int64_t memory_capacity = 0) {
  PlasmaConnectReplyBuilder builder_(_fbb);
  builder_.add_memory_capacity(memory_capacity);
  return builder_.Finish();
}

struct PlasmaEvictRequest FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NUM_BYTES = 4
  };
  uint64_t num_bytes() const {
    return GetField<uint64_t>(VT_NUM_BYTES, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_NUM_BYTES) &&
           verifier.EndTable();
  }
};

struct PlasmaEvictRequestBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_num_bytes(uint64_t num_bytes) {
    fbb_.AddElement<uint64_t>(PlasmaEvictRequest::VT_NUM_BYTES, num_bytes, 0);
  }
  explicit PlasmaEvictRequestBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  PlasmaEvictRequestBuilder &operator=(const PlasmaEvictRequestBuilder &);
  flatbuffers::Offset<PlasmaEvictRequest> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<PlasmaEvictRequest>(end);
    return o;
  }
};

inline flatbuffers::Offset<PlasmaEvictRequest> CreatePlasmaEvictRequest(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t num_bytes = 0) {
  PlasmaEvictRequestBuilder builder_(_fbb);
  builder_.add_num_bytes(num_bytes);
  return builder_.Finish();
}

struct PlasmaEvictReply FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NUM_BYTES = 4
  };
  uint64_t num_bytes() const {
    return GetField<uint64_t>(VT_NUM_BYTES, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_NUM_BYTES) &&
           verifier.EndTable();
  }
};

struct PlasmaEvictReplyBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_num_bytes(uint64_t num_bytes) {
    fbb_.AddElement<uint64_t>(PlasmaEvictReply::VT_NUM_BYTES, num_bytes, 0);
  }
  explicit PlasmaEvictReplyBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  PlasmaEvictReplyBuilder &operator=(const PlasmaEvictReplyBuilder &);
  flatbuffers::Offset<PlasmaEvictReply> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<PlasmaEvictReply>(end);
    return o;
  }
};

inline flatbuffers::Offset<PlasmaEvictReply> CreatePlasmaEvictReply(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t num_bytes = 0) {
  PlasmaEvictReplyBuilder builder_(_fbb);
  builder_.add_num_bytes(num_bytes);
  return builder_.Finish();
}

struct PlasmaSubscribeRequest FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
};

struct PlasmaSubscribeRequestBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  explicit PlasmaSubscribeRequestBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  PlasmaSubscribeRequestBuilder &operator=(const PlasmaSubscribeRequestBuilder &);
  flatbuffers::Offset<PlasmaSubscribeRequest> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<PlasmaSubscribeRequest>(end);
    return o;
  }
};

inline flatbuffers::Offset<PlasmaSubscribeRequest> CreatePlasmaSubscribeRequest(
    flatbuffers::FlatBufferBuilder &_fbb) {
  PlasmaSubscribeRequestBuilder builder_(_fbb);
  return builder_.Finish();
}

struct PlasmaNotification FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_OBJECT_INFO = 4
  };
  const flatbuffers::Vector<flatbuffers::Offset<plasma::flatbuf::ObjectInfo>> *object_info() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<plasma::flatbuf::ObjectInfo>> *>(VT_OBJECT_INFO);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_OBJECT_INFO) &&
           verifier.VerifyVector(object_info()) &&
           verifier.VerifyVectorOfTables(object_info()) &&
           verifier.EndTable();
  }
};

struct PlasmaNotificationBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_object_info(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<plasma::flatbuf::ObjectInfo>>> object_info) {
    fbb_.AddOffset(PlasmaNotification::VT_OBJECT_INFO, object_info);
  }
  explicit PlasmaNotificationBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  PlasmaNotificationBuilder &operator=(const PlasmaNotificationBuilder &);
  flatbuffers::Offset<PlasmaNotification> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<PlasmaNotification>(end);
    return o;
  }
};

inline flatbuffers::Offset<PlasmaNotification> CreatePlasmaNotification(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<plasma::flatbuf::ObjectInfo>>> object_info = 0) {
  PlasmaNotificationBuilder builder_(_fbb);
  builder_.add_object_info(object_info);
  return builder_.Finish();
}

inline flatbuffers::Offset<PlasmaNotification> CreatePlasmaNotificationDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<flatbuffers::Offset<plasma::flatbuf::ObjectInfo>> *object_info = nullptr) {
  auto object_info__ = object_info ? _fbb.CreateVector<flatbuffers::Offset<plasma::flatbuf::ObjectInfo>>(*object_info) : 0;
  return plasma::flatbuf::CreatePlasmaNotification(
      _fbb,
      object_info__);
}

struct PlasmaDataRequest FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_OBJECT_ID = 4,
    VT_ADDRESS = 6,
    VT_PORT = 8
  };
  const flatbuffers::String *object_id() const {
    return GetPointer<const flatbuffers::String *>(VT_OBJECT_ID);
  }
  const flatbuffers::String *address() const {
    return GetPointer<const flatbuffers::String *>(VT_ADDRESS);
  }
  int32_t port() const {
    return GetField<int32_t>(VT_PORT, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_OBJECT_ID) &&
           verifier.VerifyString(object_id()) &&
           VerifyOffset(verifier, VT_ADDRESS) &&
           verifier.VerifyString(address()) &&
           VerifyField<int32_t>(verifier, VT_PORT) &&
           verifier.EndTable();
  }
};

struct PlasmaDataRequestBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_object_id(flatbuffers::Offset<flatbuffers::String> object_id) {
    fbb_.AddOffset(PlasmaDataRequest::VT_OBJECT_ID, object_id);
  }
  void add_address(flatbuffers::Offset<flatbuffers::String> address) {
    fbb_.AddOffset(PlasmaDataRequest::VT_ADDRESS, address);
  }
  void add_port(int32_t port) {
    fbb_.AddElement<int32_t>(PlasmaDataRequest::VT_PORT, port, 0);
  }
  explicit PlasmaDataRequestBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  PlasmaDataRequestBuilder &operator=(const PlasmaDataRequestBuilder &);
  flatbuffers::Offset<PlasmaDataRequest> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<PlasmaDataRequest>(end);
    return o;
  }
};

inline flatbuffers::Offset<PlasmaDataRequest> CreatePlasmaDataRequest(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> object_id = 0,
    flatbuffers::Offset<flatbuffers::String> address = 0,
    int32_t port = 0) {
  PlasmaDataRequestBuilder builder_(_fbb);
  builder_.add_port(port);
  builder_.add_address(address);
  builder_.add_object_id(object_id);
  return builder_.Finish();
}

inline flatbuffers::Offset<PlasmaDataRequest> CreatePlasmaDataRequestDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *object_id = nullptr,
    const char *address = nullptr,
    int32_t port = 0) {
  auto object_id__ = object_id ? _fbb.CreateString(object_id) : 0;
  auto address__ = address ? _fbb.CreateString(address) : 0;
  return plasma::flatbuf::CreatePlasmaDataRequest(
      _fbb,
      object_id__,
      address__,
      port);
}

struct PlasmaDataReply FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_OBJECT_ID = 4,
    VT_OBJECT_SIZE = 6,
    VT_METADATA_SIZE = 8
  };
  const flatbuffers::String *object_id() const {
    return GetPointer<const flatbuffers::String *>(VT_OBJECT_ID);
  }
  uint64_t object_size() const {
    return GetField<uint64_t>(VT_OBJECT_SIZE, 0);
  }
  uint64_t metadata_size() const {
    return GetField<uint64_t>(VT_METADATA_SIZE, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_OBJECT_ID) &&
           verifier.VerifyString(object_id()) &&
           VerifyField<uint64_t>(verifier, VT_OBJECT_SIZE) &&
           VerifyField<uint64_t>(verifier, VT_METADATA_SIZE) &&
           verifier.EndTable();
  }
};

struct PlasmaDataReplyBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_object_id(flatbuffers::Offset<flatbuffers::String> object_id) {
    fbb_.AddOffset(PlasmaDataReply::VT_OBJECT_ID, object_id);
  }
  void add_object_size(uint64_t object_size) {
    fbb_.AddElement<uint64_t>(PlasmaDataReply::VT_OBJECT_SIZE, object_size, 0);
  }
  void add_metadata_size(uint64_t metadata_size) {
    fbb_.AddElement<uint64_t>(PlasmaDataReply::VT_METADATA_SIZE, metadata_size, 0);
  }
  explicit PlasmaDataReplyBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  PlasmaDataReplyBuilder &operator=(const PlasmaDataReplyBuilder &);
  flatbuffers::Offset<PlasmaDataReply> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<PlasmaDataReply>(end);
    return o;
  }
};

inline flatbuffers::Offset<PlasmaDataReply> CreatePlasmaDataReply(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> object_id = 0,
    uint64_t object_size = 0,
    uint64_t metadata_size = 0) {
  PlasmaDataReplyBuilder builder_(_fbb);
  builder_.add_metadata_size(metadata_size);
  builder_.add_object_size(object_size);
  builder_.add_object_id(object_id);
  return builder_.Finish();
}

inline flatbuffers::Offset<PlasmaDataReply> CreatePlasmaDataReplyDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *object_id = nullptr,
    uint64_t object_size = 0,
    uint64_t metadata_size = 0) {
  auto object_id__ = object_id ? _fbb.CreateString(object_id) : 0;
  return plasma::flatbuf::CreatePlasmaDataReply(
      _fbb,
      object_id__,
      object_size,
      metadata_size);
}

struct PlasmaRefreshLRURequest FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_OBJECT_IDS = 4
  };
  const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *object_ids() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *>(VT_OBJECT_IDS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_OBJECT_IDS) &&
           verifier.VerifyVector(object_ids()) &&
           verifier.VerifyVectorOfStrings(object_ids()) &&
           verifier.EndTable();
  }
};

struct PlasmaRefreshLRURequestBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_object_ids(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> object_ids) {
    fbb_.AddOffset(PlasmaRefreshLRURequest::VT_OBJECT_IDS, object_ids);
  }
  explicit PlasmaRefreshLRURequestBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  PlasmaRefreshLRURequestBuilder &operator=(const PlasmaRefreshLRURequestBuilder &);
  flatbuffers::Offset<PlasmaRefreshLRURequest> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<PlasmaRefreshLRURequest>(end);
    return o;
  }
};

inline flatbuffers::Offset<PlasmaRefreshLRURequest> CreatePlasmaRefreshLRURequest(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> object_ids = 0) {
  PlasmaRefreshLRURequestBuilder builder_(_fbb);
  builder_.add_object_ids(object_ids);
  return builder_.Finish();
}

inline flatbuffers::Offset<PlasmaRefreshLRURequest> CreatePlasmaRefreshLRURequestDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<flatbuffers::Offset<flatbuffers::String>> *object_ids = nullptr) {
  auto object_ids__ = object_ids ? _fbb.CreateVector<flatbuffers::Offset<flatbuffers::String>>(*object_ids) : 0;
  return plasma::flatbuf::CreatePlasmaRefreshLRURequest(
      _fbb,
      object_ids__);
}

struct PlasmaRefreshLRUReply FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
};

struct PlasmaRefreshLRUReplyBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  explicit PlasmaRefreshLRUReplyBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  PlasmaRefreshLRUReplyBuilder &operator=(const PlasmaRefreshLRUReplyBuilder &);
  flatbuffers::Offset<PlasmaRefreshLRUReply> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<PlasmaRefreshLRUReply>(end);
    return o;
  }
};

inline flatbuffers::Offset<PlasmaRefreshLRUReply> CreatePlasmaRefreshLRUReply(
    flatbuffers::FlatBufferBuilder &_fbb) {
  PlasmaRefreshLRUReplyBuilder builder_(_fbb);
  return builder_.Finish();
}

}  // namespace flatbuf
}  // namespace plasma

#endif  // FLATBUFFERS_GENERATED_PLASMA_PLASMA_FLATBUF_H_
